require(Amelia)
missmap(train.data, main="Missing Map")
AmeliaView()
table(train.data$Embarked, useNA = "always")
train.data = read.csv("train.csv", na.strings=c("NA", ""))
train.data = read.csv("data/train.csv", na.strings=c("NA", ""))
getwd()
getwd()
train.data = read.csv("train.csv", na.strings=c("NA", ""))
train.data = read.csv("train.csv", na.strings=c("NA", ""))
setwd("C:/Users/john/Google Drive/R Directory/machine_learning_with_R_cookbook")
train.data = read.csv("data/train.csv", na.strings=c("NA", ""))
train.data$Survived = factor(train.data$Survived)
train.data$Pclass = factor(train.data$Pclass)
table(train.data$Embarked, useNA = "always")
str(train.data)
table(train.data$Embarked, useNA = "always")
table(train.data$Sex)
table(train.data$Cabin)
train.data$Embarked[which(is.na(train.data$Embarked))] = 'S';
table(train.data$Embarked, useNA = "always")
table(train.data$Embarked, useNA = "always")
train.data$Name = as.character(train.data$Name)
str(train.data)
str(train.data$Name)
table_words = table(unlist(strsplit(train.data$Name, "\\s+")))
sort(table_words [grep('\\.',names(table_words))], decreasing=TRUE)
print(table_words)
View(table_words)
tb = cbind(train.data$Age, str_match(train.data$Name, " [a-zA-Z]+\\."))
library(stringr)
tb = cbind(train.data$Age, str_match(train.data$Name, " [a-zA-Z]+\\."))
table(tb[is.na(tb[,1]),2])
?cbind
mean.mr = mean(train.data$Age[grepl(" Mr\\.", train.data$Name) & !is.na(train.data$Age)])
mean.mrs = mean(train.data$Age[grepl(" Mrs\\.", train.data$Name) & !is.na(train.data$Age)])
mean.dr = mean(train.data$Age[grepl(" Dr\\.", train.data$Name) & !is.na(train.data$Age)])
mean.miss = mean(train.data$Age[grepl(" Miss\\.", train.data$Name) & !is.na(train.data$Age)])
mean.master =  mean(train.data$Age[grepl(" Master\\.", train.data$Name) & !is.na(train.data$Age)])
train.data$Age[grepl(" Mr\\.", train.data$Name) & is.na(train.data$Age)] = mean.mr
train.data$Age[grepl(" Mrs\\.", train.data$Name) & is.na(train.data$Age)] = mean.mrs
train.data$Age[grepl(" Dr\\.", train.data$Name) & is.na(train.data$Age)] = mean.dr
train.data$Age[grepl(" Miss\\.", train.data$Name) & is.na(train.data$Age)] = mean.miss
train.data$Age[grepl(" Master\\.", train.data$Name) & is.na(train.data$Age)] = mean.master
barplot(table(train.data$Survived), main="Passenger Survival",  names= c("Perished", "Survived"))
?table
table(train.data$Survived)
table(train.data$Pclass)
table(train.data$Sex)
table(train.data$Age)
barplot(table(train.data$Pclass), main="Passenger Class",  names= c("first", "second", "third"))
barplot(table(train.data$Sex), main="Passenger Gender")
hist(train.data$Age, main="Passenger Age", xlab = "Age")
barplot(table(train.data$SibSp), main="Passenger Siblings")
barplot(table(train.data$Parch), main="Passenger Parch")
barplot(table(train.data$Parch), main="Passenger Parch")
barplot(table(train.data$SibSp), main="Passenger Siblings")
barplot(table(train.data$Embarked), main="Port of Embarkation")
counts <- table( train.data$Survived, train.data$Sex)
barplot(counts,  col=c("darkblue","red"), legend = c("Perished", "Survived"), main = “Passenger Survival by Sex”)
counts <- table( train.data$Survived, train.data$Pclass)
barplot(counts,  col=c("darkblue","red"), legend =c("Perished", "Survived"), main= "Titanic Class Bar Plot" )
hist(train.data$Age[which(train.data$Survived == "0")], main= "Passenger Age Histogram", xlab="Age", ylab="Count", col ="blue", breaks=seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "1")], col ="red", add = T, breaks=seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "0")], main= "Passenger Age Histogram", xlab="Age", ylab="Count", col ="blue", breaks=seq(0,80,by=2))
hist(train.data$Age[which(train.data$Survived == "1")], col ="red", add = T, breaks=seq(0,80,by=2))
rain.child = train.data$Survived[train.data$Age < 13]
length(train.child[which(train.child == 1)] ) / length(train.child)
rain.child = train.data$Survived[train.data$Age < 13]
length(train.child[which(train.child == 1)] ) / length(train.child)
train.child = train.data$Survived[train.data$Age < 13]
length(train.child[which(train.child == 1)] ) / length(train.child)
length(train.senior[which(train.senior == 1)] ) / length(train.senior)
mosaicplot(train.data$Pclass ~ train.data$Survived,  main="Passenger Survival Class", color=TRUE,
xlab="Pclass", ylab="Survived")
head(data)
split.data <- function(data, p = 0.7, s = 666){
set.seed(s)
index <- sample(1:dim(data)[1])
train <- data[index[1:floor(dim(data)[1] * p)], ]
test <- data[index[((ceiling(dim(data)[1] * p)) + 1):dim(data)[1]], ]
return(list(train = train, test = test))
}
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='superjohn', token='581061ECFF8D8DDACE58C66E47B01F46', secret='p8Tys7VSwZ/wSmTSg5//tJgOpvajMF++apDZyG9U')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
get_wd()
getwd()
getcd()
shinyapps::deployApp('./shinyapps.io')
shinyapps::deployApp('../shinyapps.io')
setwd("C:/Users/john/Google Drive/R Directory/shinyapps.io")
getwd()
shinyapps::deployApp('C:/Users/john/Google Drive/R Directory/shinyapps.io')
runApp('C:/Users/john/Google Drive/R Directory/shinyapps.io')
library(shiny)
runApp('C:/Users/john/Google Drive/R Directory/shinyapps.io')
system.info()
runApp('C:/Users/john/Google Drive/R Directory/shiny_examples/01_hello')
library(shinyapps)
shinyapps::deployApp('C:/Users/john/Google Drive/R Directory/shiny_examples/01_hello')
library(shinyapps)
shinyapps::deployApp('C:/Users/john/Google Drive/R Directory/shiny_examples/01_hello')
shinyapps::deployApp('C:/Users/john/Google Drive/R Directory/shiny_examples/02_text')
shinyapps::setAccountInfo(name='superjohn', token='581061ECFF8D8DDACE58C66E47B01F46', secret='p8Tys7VSwZ/wSmTSg5//tJgOpvajMF++apDZyG9U')
library(shinyapps)
shinyapps::deployApp('C:/Users/john/Google Drive/R Directory/shiny_examples/02_text')
library(shinyapps)
deployApp('C:/Users/john/Google Drive/R Directory/shiny_examples/02_text')
library(shinyapps)
deployApp('C:/Users/john/Google Drive/R Directory/shiny_examples/01_hello')
